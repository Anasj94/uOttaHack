{"ast":null,"code":"import options from \"./messaging-options\";\nimport Paho from \"paho-mqtt\";\nclass Messaging extends Paho.Client {\n  constructor() {\n    super(options.invocationContext.host, Number(options.invocationContext.port), options.invocationContext.clientId);\n    this.onMessageArrived = this.handleMessage.bind(this);\n    this.callbacks = [];\n  }\n  connectWithPromise() {\n    return new Promise((resolve, reject) => {\n      options.onSuccess = resolve;\n      options.onFailure = reject;\n      this.connect(options);\n    });\n  }\n\n  // called when the client loses its connection\n  onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"Connection lost with Solace Cloud\");\n    }\n    // Add auto connect logic with backoff here if you want to automatically reconnect\n  }\n  register(callback) {\n    this.callbacks.push(callback);\n  }\n\n  // called when a message arrives\n  handleMessage(message) {\n    console.log(\"Received message\", message.payloadString);\n    this.callbacks.forEach(callback => callback(message));\n  }\n}\nconst messaging = new Messaging();\nexport default messaging;","map":{"version":3,"names":["options","Paho","Messaging","Client","constructor","invocationContext","host","Number","port","clientId","onMessageArrived","handleMessage","bind","callbacks","connectWithPromise","Promise","resolve","reject","onSuccess","onFailure","connect","onConnectionLost","responseObject","errorCode","console","log","register","callback","push","message","payloadString","forEach","messaging"],"sources":["/Users/anasjavaid/Desktop/uOttawa Hackathon/uOttaHack/Front-end/src/components/Messaging.js"],"sourcesContent":["import options from \"./messaging-options\";\nimport Paho from \"paho-mqtt\";\n\nclass Messaging extends Paho.Client {\n\n\tconstructor() {\n\t\tsuper(options.invocationContext.host, Number(options.invocationContext.port), options.invocationContext.clientId);\n\t\tthis.onMessageArrived = this.handleMessage.bind(this);\n\t\tthis.callbacks = [];\n\t}\n\n\tconnectWithPromise() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\toptions.onSuccess = resolve;\n\t\t\toptions.onFailure = reject;\n\t\t\tthis.connect(options);\n\t\t});\n\t}\n\n\t// called when the client loses its connection\n\tonConnectionLost(responseObject) {\n\t\tif (responseObject.errorCode !== 0) {\n\t\t\tconsole.log(\"Connection lost with Solace Cloud\");\n\t\t}\n\t\t// Add auto connect logic with backoff here if you want to automatically reconnect\n\t}\n\n\tregister(callback) {\n\t\tthis.callbacks.push(callback);\n\t}\n\t\n\t// called when a message arrives\n\thandleMessage(message) {\n\t\tconsole.log(\"Received message\", message.payloadString);\n\t\tthis.callbacks.forEach(callback => callback(message));\n\t}\n}\n\nconst messaging = new Messaging();\nexport default messaging;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,qBAAqB;AACzC,OAAOC,IAAI,MAAM,WAAW;AAE5B,MAAMC,SAAS,SAASD,IAAI,CAACE,MAAM,CAAC;EAEnCC,WAAWA,CAAA,EAAG;IACb,KAAK,CAACJ,OAAO,CAACK,iBAAiB,CAACC,IAAI,EAAEC,MAAM,CAACP,OAAO,CAACK,iBAAiB,CAACG,IAAI,CAAC,EAAER,OAAO,CAACK,iBAAiB,CAACI,QAAQ,CAAC;IACjH,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;IACrD,IAAI,CAACC,SAAS,GAAG,EAAE;EACpB;EAEAC,kBAAkBA,CAAA,EAAG;IACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACvCjB,OAAO,CAACkB,SAAS,GAAGF,OAAO;MAC3BhB,OAAO,CAACmB,SAAS,GAAGF,MAAM;MAC1B,IAAI,CAACG,OAAO,CAACpB,OAAO,CAAC;IACtB,CAAC,CAAC;EACH;;EAEA;EACAqB,gBAAgBA,CAACC,cAAc,EAAE;IAChC,IAAIA,cAAc,CAACC,SAAS,KAAK,CAAC,EAAE;MACnCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IACjD;IACA;EACD;EAEAC,QAAQA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACd,SAAS,CAACe,IAAI,CAACD,QAAQ,CAAC;EAC9B;;EAEA;EACAhB,aAAaA,CAACkB,OAAO,EAAE;IACtBL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,OAAO,CAACC,aAAa,CAAC;IACtD,IAAI,CAACjB,SAAS,CAACkB,OAAO,CAACJ,QAAQ,IAAIA,QAAQ,CAACE,OAAO,CAAC,CAAC;EACtD;AACD;AAEA,MAAMG,SAAS,GAAG,IAAI9B,SAAS,CAAC,CAAC;AACjC,eAAe8B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}