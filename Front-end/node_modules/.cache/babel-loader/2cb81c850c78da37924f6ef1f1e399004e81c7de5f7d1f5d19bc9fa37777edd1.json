{"ast":null,"code":"var _jsxFileName = \"/Users/nadeem/Desktop/uOttaHack/Front-end/src/components/AnimatedDot.js\";\nimport React, { Component } from 'react';\nimport \"./AnimatedDot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AnimatedDot extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notified: false // Flag to track whether notification has been triggered\n    };\n  }\n  componentDidMount() {\n    // Adjust animation duration based on car speed\n    this.adjustDotSpeed(100); // Adjust car speed as needed in km/hr\n\n    // Check proximity and notify periodically (adjust the interval as needed)\n    this.proximityInterval = setInterval(() => {\n      this.checkProximityAndNotify(50); // Adjust the threshold distance as needed\n    }, 1000); // Check every second\n  }\n  componentWillUnmount() {\n    clearInterval(this.proximityInterval);\n  }\n  adjustDotSpeed(carSpeedKmPerHour) {\n    const dotElement = document.getElementById('dot');\n    const containerWidth = document.querySelector('.container').clientWidth;\n    const dotWidth = dotElement.offsetWidth;\n    const distanceToTravel = containerWidth - dotWidth; // Distance to travel\n\n    // Calculate time taken to travel the distance at given speed (in milliseconds)\n    const timeTakenInMillis = distanceToTravel / 1000 / (carSpeedKmPerHour / 3600) * 1000;\n\n    // Update animation duration\n    dotElement.style.animationDuration = timeTakenInMillis + 'ms';\n  }\n  calculateDistance(element1, element2) {\n    const rect1 = element1.getBoundingClientRect();\n    const rect2 = element2.getBoundingClientRect();\n    const distance = Math.sqrt(Math.pow(rect1.x - rect2.x, 2) + Math.pow(rect1.y - rect2.y, 2));\n    return distance;\n  }\n  checkProximityAndNotify(thresholdDistance) {\n    const dotElement = document.getElementById('dot');\n    const dotStationElement = document.querySelector('.dot-station');\n    const dotStationElement2 = document.querySelector('.dot-station2');\n    const distance1 = this.calculateDistance(dotElement, dotStationElement);\n    const distance2 = this.calculateDistance(dotElement, dotStationElement2);\n    if ((distance1 < thresholdDistance || distance2 < thresholdDistance) && !this.state.notified) {\n      alert('Dot is near a dot-station!');\n      this.setState({\n        notified: true\n      }); // Set the flag to true to indicate that notification has been triggered\n    } else if (distance1 >= thresholdDistance && distance2 >= thresholdDistance) {\n      this.setState({\n        notified: false\n      }); // Reset the flag when the dot moves away from the dot-stations\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\",\n        id: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot-station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot-station2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default AnimatedDot;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","AnimatedDot","constructor","args","state","notified","componentDidMount","adjustDotSpeed","proximityInterval","setInterval","checkProximityAndNotify","componentWillUnmount","clearInterval","carSpeedKmPerHour","dotElement","document","getElementById","containerWidth","querySelector","clientWidth","dotWidth","offsetWidth","distanceToTravel","timeTakenInMillis","style","animationDuration","calculateDistance","element1","element2","rect1","getBoundingClientRect","rect2","distance","Math","sqrt","pow","x","y","thresholdDistance","dotStationElement","dotStationElement2","distance1","distance2","alert","setState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id"],"sources":["/Users/nadeem/Desktop/uOttaHack/Front-end/src/components/AnimatedDot.js"],"sourcesContent":["import React, { Component } from 'react';\nimport \"./AnimatedDot.css\"\n\nclass AnimatedDot extends Component {\n  state = {\n    notified: false // Flag to track whether notification has been triggered\n  };\n\n  componentDidMount() {\n    // Adjust animation duration based on car speed\n    this.adjustDotSpeed(100); // Adjust car speed as needed in km/hr\n\n    // Check proximity and notify periodically (adjust the interval as needed)\n    this.proximityInterval = setInterval(() => {\n      this.checkProximityAndNotify(50); // Adjust the threshold distance as needed\n    }, 1000); // Check every second\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.proximityInterval);\n  }\n\n  adjustDotSpeed(carSpeedKmPerHour) {\n    const dotElement = document.getElementById('dot');\n    const containerWidth = document.querySelector('.container').clientWidth;\n    const dotWidth = dotElement.offsetWidth;\n    const distanceToTravel = containerWidth - dotWidth; // Distance to travel\n\n    // Calculate time taken to travel the distance at given speed (in milliseconds)\n    const timeTakenInMillis =\n      (distanceToTravel / 1000 / (carSpeedKmPerHour / 3600)) * 1000;\n\n    // Update animation duration\n    dotElement.style.animationDuration = timeTakenInMillis + 'ms';\n  }\n\n  calculateDistance(element1, element2) {\n    const rect1 = element1.getBoundingClientRect();\n    const rect2 = element2.getBoundingClientRect();\n    const distance = Math.sqrt(\n      Math.pow(rect1.x - rect2.x, 2) + Math.pow(rect1.y - rect2.y, 2)\n    );\n    return distance;\n  }\n\n  checkProximityAndNotify(thresholdDistance) {\n    const dotElement = document.getElementById('dot');\n    const dotStationElement = document.querySelector('.dot-station');\n    const dotStationElement2 = document.querySelector('.dot-station2');\n    const distance1 = this.calculateDistance(dotElement, dotStationElement);\n    const distance2 = this.calculateDistance(dotElement, dotStationElement2);\n    if (\n      (distance1 < thresholdDistance || distance2 < thresholdDistance) &&\n      !this.state.notified\n    ) {\n      alert('Dot is near a dot-station!');\n      this.setState({ notified: true }); // Set the flag to true to indicate that notification has been triggered\n    } else if (distance1 >= thresholdDistance && distance2 >= thresholdDistance) {\n      this.setState({ notified: false }); // Reset the flag when the dot moves away from the dot-stations\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"line\"></div>\n        <div className=\"dot\" id=\"dot\"></div>\n        <div className=\"dot-station\"></div>\n        <div className=\"dot-station2\"></div>\n      </div>\n    );\n  }\n}\n\nexport default AnimatedDot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}