{"ast":null,"code":"var _jsxFileName = \"/Users/anasjavaid/Desktop/uOttawa Hackathon/uOttaHack-7/Front-end/src/components/AnimatedDot.js\";\nimport React, { Component } from 'react';\nimport \"./AnimatedDot.css\";\nimport Messaging from './Messaging';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AnimatedDot extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notified: false // Flag to track whether notification has been triggered\n    };\n    this.handleKeyDown = event => {\n      // Check if the pressed key is the desired key to trigger the action (e.g., 'Enter' key)\n      if (event.key === 'Enter') {\n        // Perform publishing action here\n        const dotElement = document.getElementById('dot');\n        const position = {\n          x: dotElement.offsetLeft,\n          y: dotElement.offsetTop,\n          car_no: \"CAR-01\"\n        };\n        const payload = JSON.stringify(position);\n        Messaging.publish('emergency', payload);\n        // You can publish or perform any other action here when the specified key is pressed\n      }\n    };\n    this.publishDotPosition = () => {\n      // Get dot position\n      const dotElement = document.getElementById('dot');\n      const position = {\n        x: dotElement.offsetLeft,\n        y: dotElement.offsetTop,\n        car_no: \"CAR-01\"\n      };\n      const payload = JSON.stringify(position);\n      // Publish dot position to a topic named 'car'\n      Messaging.publish('cars', payload);\n\n      // Pass position to parent component\n      this.props.updatePosition(position);\n    };\n  }\n  componentDidMount() {\n    Messaging.connectWithPromise().then(() => {\n      console.log('Connected to Solace Cloud');\n    }).catch(error => {\n      console.error('Failed to connect to Solace Cloud', error);\n    });\n\n    // Adjust animation duration based on car speed\n    this.adjustDotSpeed(100); // Adjust car speed as needed in km/hr\n\n    // Check proximity and notify periodically (adjust the interval as needed)\n    this.proximityInterval = setInterval(() => {\n      this.checkProximityAndNotify(50); // Adjust the threshold distance as needed\n    }, 1000); // Check every second\n\n    // Publish dot position every 1 second\n    this.publishDotPositionInterval = setInterval(this.publishDotPosition, 1000);\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n  componentWillUnmount() {\n    clearInterval(this.proximityInterval);\n    clearInterval(this.publishDotPositionInterval);\n  }\n  adjustDotSpeed(carSpeedKmPerHour) {\n    const dotElement = document.getElementById('dot');\n    const containerWidth = document.querySelector('.container').clientWidth;\n    const dotWidth = dotElement.offsetWidth;\n    const distanceToTravel = containerWidth - dotWidth; // Distance to travel\n\n    // Calculate time taken to travel the distance at given speed (in milliseconds)\n    const timeTakenInMillis = distanceToTravel / 1000 / (carSpeedKmPerHour / 3600) * 1000;\n\n    // Update animation duration\n    dotElement.style.animationDuration = timeTakenInMillis + 'ms';\n  }\n  calculateDistance(element1, element2) {\n    const rect1 = element1.getBoundingClientRect();\n    const rect2 = element2.getBoundingClientRect();\n    const distance = Math.sqrt(Math.pow(rect1.x - rect2.x, 2) + Math.pow(rect1.y - rect2.y, 2));\n    return distance;\n  }\n  checkProximityAndNotify(thresholdDistance) {\n    const dotElement = document.getElementById('dot');\n    const dotStationElement = document.querySelector('.dot-station');\n    const dotStationElement2 = document.querySelector('.dot-station2');\n    const distance1 = this.calculateDistance(dotElement, dotStationElement);\n    const distance2 = this.calculateDistance(dotElement, dotStationElement2);\n    if ((distance1 < thresholdDistance || distance2 < thresholdDistance) && !this.state.notified) {\n      // alert('Dot is near a dot-station!');\n      this.setState({\n        notified: true\n      }); // Set the flag to true to indicate that notification has been triggered\n    } else if (distance1 >= thresholdDistance && distance2 >= thresholdDistance) {\n      this.setState({\n        notified: false\n      }); // Reset the flag when the dot moves away from the dot-stations\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\",\n        id: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot-station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot-station2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default AnimatedDot;","map":{"version":3,"names":["React","Component","Messaging","jsxDEV","_jsxDEV","AnimatedDot","constructor","args","state","notified","handleKeyDown","event","key","dotElement","document","getElementById","position","x","offsetLeft","y","offsetTop","car_no","payload","JSON","stringify","publish","publishDotPosition","props","updatePosition","componentDidMount","connectWithPromise","then","console","log","catch","error","adjustDotSpeed","proximityInterval","setInterval","checkProximityAndNotify","publishDotPositionInterval","addEventListener","componentWillUnmount","clearInterval","carSpeedKmPerHour","containerWidth","querySelector","clientWidth","dotWidth","offsetWidth","distanceToTravel","timeTakenInMillis","style","animationDuration","calculateDistance","element1","element2","rect1","getBoundingClientRect","rect2","distance","Math","sqrt","pow","thresholdDistance","dotStationElement","dotStationElement2","distance1","distance2","setState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id"],"sources":["/Users/anasjavaid/Desktop/uOttawa Hackathon/uOttaHack-7/Front-end/src/components/AnimatedDot.js"],"sourcesContent":["import React, { Component } from 'react';\nimport \"./AnimatedDot.css\";\nimport Messaging from './Messaging';\n\nclass AnimatedDot extends Component {\n  state = {\n    notified: false // Flag to track whether notification has been triggered\n  };\n\n  componentDidMount() {\n    Messaging.connectWithPromise()\n      .then(() => {\n        console.log('Connected to Solace Cloud');\n      })\n      .catch((error) => {\n        console.error('Failed to connect to Solace Cloud', error);\n      });\n\n    // Adjust animation duration based on car speed\n    this.adjustDotSpeed(100); // Adjust car speed as needed in km/hr\n\n    // Check proximity and notify periodically (adjust the interval as needed)\n    this.proximityInterval = setInterval(() => {\n      this.checkProximityAndNotify(50); // Adjust the threshold distance as needed\n    }, 1000); // Check every second\n\n    // Publish dot position every 1 second\n    this.publishDotPositionInterval = setInterval(this.publishDotPosition, 1000);\n    document.addEventListener('keydown', this.handleKeyDown);\n    \n  }\n\n  handleKeyDown = (event) => {\n    // Check if the pressed key is the desired key to trigger the action (e.g., 'Enter' key)\n    if (event.key === 'Enter') {\n      // Perform publishing action here\n      const dotElement = document.getElementById('dot');\n      const position = {\n        x: dotElement.offsetLeft,\n        y: dotElement.offsetTop,\n        car_no:\"CAR-01\"\n      };\n \n      const payload = JSON.stringify(position)\n      Messaging.publish('emergency', payload)\n      // You can publish or perform any other action here when the specified key is pressed\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.proximityInterval);\n    clearInterval(this.publishDotPositionInterval);\n  }\n\n  adjustDotSpeed(carSpeedKmPerHour) {\n    const dotElement = document.getElementById('dot');\n    const containerWidth = document.querySelector('.container').clientWidth;\n    const dotWidth = dotElement.offsetWidth;\n    const distanceToTravel = containerWidth - dotWidth; // Distance to travel\n\n    // Calculate time taken to travel the distance at given speed (in milliseconds)\n    const timeTakenInMillis =\n      (distanceToTravel / 1000 / (carSpeedKmPerHour / 3600)) * 1000;\n\n    // Update animation duration\n    dotElement.style.animationDuration = timeTakenInMillis + 'ms';\n  }\n\n  calculateDistance(element1, element2) {\n    const rect1 = element1.getBoundingClientRect();\n    const rect2 = element2.getBoundingClientRect();\n    const distance = Math.sqrt(\n      Math.pow(rect1.x - rect2.x, 2) + Math.pow(rect1.y - rect2.y, 2)\n    );\n    return distance;\n  }\n\n  checkProximityAndNotify(thresholdDistance) {\n    const dotElement = document.getElementById('dot');\n    const dotStationElement = document.querySelector('.dot-station');\n    const dotStationElement2 = document.querySelector('.dot-station2');\n    const distance1 = this.calculateDistance(dotElement, dotStationElement);\n    const distance2 = this.calculateDistance(dotElement, dotStationElement2);\n    if (\n      (distance1 < thresholdDistance || distance2 < thresholdDistance) &&\n      !this.state.notified\n    ) {\n      // alert('Dot is near a dot-station!');\n      this.setState({ notified: true }); // Set the flag to true to indicate that notification has been triggered\n    } else if (distance1 >= thresholdDistance && distance2 >= thresholdDistance) {\n      this.setState({ notified: false }); // Reset the flag when the dot moves away from the dot-stations\n    }\n  }\n\n  publishDotPosition = () => {\n    // Get dot position\n    const dotElement = document.getElementById('dot');\n    const position = {\n      x: dotElement.offsetLeft,\n      y: dotElement.offsetTop,\n      car_no:\"CAR-01\"\n    };\n\n    const payload = JSON.stringify(position)\n    // Publish dot position to a topic named 'car'\n    Messaging.publish('cars', payload);\n\n    // Pass position to parent component\n    this.props.updatePosition(position);\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"line\"></div>\n        <div className=\"dot\" id=\"dot\"></div>\n        <div className=\"dot-station\"></div>\n        <div className=\"dot-station2\"></div>\n      </div>\n    );\n  }\n}\n\nexport default AnimatedDot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}