{"ast":null,"code":"var _jsxFileName = \"/Users/nadeem/Desktop/uOttaHack/Front-end/src/components/F2F.js\";\nimport React, { Component } from 'react';\nimport \"./F2F.css\";\nimport Messaging from './Messaging';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass F2F extends Component {\n  constructor(...args) {\n    super(...args);\n    this.publishDotPosition = () => {\n      const dotElement = document.getElementById('dot');\n      if (!dotElement) return; // Exit if dotElement is not found\n\n      const position = {\n        x: dotElement.offsetLeft,\n        y: dotElement.offsetTop,\n        car_no: \"CAR-03\"\n      };\n      const payload = JSON.stringify(position);\n      // Publish dot position to a topic named 'cars'\n      Messaging.publish('cars', payload);\n    };\n  }\n  componentDidMount() {\n    Messaging.connectWithPromise().then(() => {\n      console.log('Connected to Solace Cloud');\n    }).catch(error => {\n      console.error('Failed to connect to Solace Cloud', error);\n    });\n\n    // Adjust animation duration based on car speed for the initial dot\n    this.adjustDotSpeed(100, 'dot'); // Adjust car speed as needed in km/hr\n    this.publishDotPositionInterval = setInterval(this.publishDotPosition, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.publishDotPositionInterval);\n  }\n  adjustDotSpeed(carSpeedKmPerHour) {\n    const containerWidth = document.querySelector('.container').clientWidth;\n\n    // Calculate the duration for both dots based on speed\n    const distanceToTravel = containerWidth - 10; // Assuming dot width of 10px\n    const timeTakenInMillis = distanceToTravel / 1000 / (carSpeedKmPerHour / 3600) * 1000;\n\n    // Store animation duration for reuse\n    this.dotAnimationDuration = timeTakenInMillis;\n\n    // Apply to first dot\n    const dotElement = document.getElementById('dot');\n    if (dotElement) {\n      dotElement.style.animationDuration = `${timeTakenInMillis}ms`;\n    }\n\n    // Apply to second dot if it exists\n    const dotElement2 = document.getElementById('dot2');\n    if (dotElement2) {\n      dotElement2.style.animationDuration = `${timeTakenInMillis}ms`;\n    }\n  }\n  renderSecondDot() {\n    const {\n      initialPosition\n    } = this.props;\n    if (!initialPosition) return null;\n\n    // Ensure dot starts from initialPosition and moves with the same animation\n    const style = {\n      left: `${initialPosition.x}px`,\n      animationName: 'moveDot',\n      animationTimingFunction: 'linear',\n      animationFillMode: 'forwards',\n      animationPlayState: 'running'\n    };\n\n    // Apply the same animation duration as the first dot\n    if (this.dotAnimationDuration) {\n      style.animationDuration = `${this.dotAnimationDuration}ms`;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\",\n      id: \"dot2\",\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\",\n        id: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), this.renderSecondDot()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default F2F;","map":{"version":3,"names":["React","Component","Messaging","jsxDEV","_jsxDEV","F2F","constructor","args","publishDotPosition","dotElement","document","getElementById","position","x","offsetLeft","y","offsetTop","car_no","payload","JSON","stringify","publish","componentDidMount","connectWithPromise","then","console","log","catch","error","adjustDotSpeed","publishDotPositionInterval","setInterval","componentWillUnmount","clearInterval","carSpeedKmPerHour","containerWidth","querySelector","clientWidth","distanceToTravel","timeTakenInMillis","dotAnimationDuration","style","animationDuration","dotElement2","renderSecondDot","initialPosition","props","left","animationName","animationTimingFunction","animationFillMode","animationPlayState","className","id","fileName","_jsxFileName","lineNumber","columnNumber","render","children"],"sources":["/Users/nadeem/Desktop/uOttaHack/Front-end/src/components/F2F.js"],"sourcesContent":["import React, { Component } from 'react';\nimport \"./F2F.css\";\nimport Messaging from './Messaging';\n\nclass F2F extends Component {\n  componentDidMount() {\n    Messaging.connectWithPromise()\n      .then(() => {\n        console.log('Connected to Solace Cloud');\n      })\n      .catch((error) => {\n        console.error('Failed to connect to Solace Cloud', error);\n      });\n\n    // Adjust animation duration based on car speed for the initial dot\n    this.adjustDotSpeed(100, 'dot'); // Adjust car speed as needed in km/hr\n    this.publishDotPositionInterval = setInterval(this.publishDotPosition, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.publishDotPositionInterval);\n  }\n\n  adjustDotSpeed(carSpeedKmPerHour) {\n    const containerWidth = document.querySelector('.container').clientWidth;\n  \n    // Calculate the duration for both dots based on speed\n    const distanceToTravel = containerWidth - 10; // Assuming dot width of 10px\n    const timeTakenInMillis =\n      (distanceToTravel / 1000 / (carSpeedKmPerHour / 3600)) * 1000;\n  \n    // Store animation duration for reuse\n    this.dotAnimationDuration = timeTakenInMillis;\n  \n    // Apply to first dot\n    const dotElement = document.getElementById('dot');\n    if (dotElement) {\n      dotElement.style.animationDuration = `${timeTakenInMillis}ms`;\n    }\n  \n    // Apply to second dot if it exists\n    const dotElement2 = document.getElementById('dot2');\n    if (dotElement2) {\n      dotElement2.style.animationDuration = `${timeTakenInMillis}ms`;\n    }\n  }\n\n  publishDotPosition = () => {\n    const dotElement = document.getElementById('dot');\n    if (!dotElement) return; // Exit if dotElement is not found\n\n    const position = {\n      x: dotElement.offsetLeft,\n      y: dotElement.offsetTop,\n      car_no: \"CAR-03\"\n    };\n\n    const payload = JSON.stringify(position);\n    // Publish dot position to a topic named 'cars'\n    Messaging.publish('cars', payload);\n  };\n\n  renderSecondDot() {\n    const { initialPosition } = this.props;\n    if (!initialPosition) return null;\n  \n    // Ensure dot starts from initialPosition and moves with the same animation\n    const style = {\n      left: `${initialPosition.x}px`,\n      animationName: 'moveDot',\n      animationTimingFunction: 'linear',\n      animationFillMode: 'forwards',\n      animationPlayState: 'running',\n    };\n  \n    // Apply the same animation duration as the first dot\n    if (this.dotAnimationDuration) {\n      style.animationDuration = `${this.dotAnimationDuration}ms`;\n    }\n  \n    return <div className=\"dot\" id=\"dot2\" style={style} />;\n  }\n  \n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"line\"></div>\n        <div className=\"dot\" id=\"dot\"></div>\n        {this.renderSecondDot()}\n      </div>\n    );\n  }\n}\n\nexport default F2F;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}